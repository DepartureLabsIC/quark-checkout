{"version":3,"file":"quark-checkout.validate.umd.js","sources":["../../../src/schemas.ts","../index.ts"],"sourcesContent":["import { z } from \"zod\"\nimport { Principal as P } from \"@dfinity/principal\"\n\nconst validatePrincipal = (p: string) => {\n  try {\n    return p === P.fromText(p).toText()\n  } catch (e) {\n    return false\n  }\n}\n\nconst DESCRIPTION = {\n  PROVIDER:\n    \"This can be either a wallet or an identity provider. The user will only be able to connect with this provider on Quark's Checkout page\",\n  INTEGRATOR:\n    \"The Quark Address of the integrator. This address will receive the payment upon a successful checkout\",\n  NOTIFY: {\n    PRINCIPAL_ID:\n      \"The Principal ID of the canister that receives the callback from Quark to notify the payment result\",\n    METHOD:\n      \"The name of the canister method that is called from Quark to notify the payment result\",\n  },\n  BAKSET: {\n    NAME: \"The name of the basket item.\",\n    DESCRIPTION: \"Optional description of the basket item.\",\n  },\n}\n\nconst PROVIDERS = {\n  II: \"ii\",\n}\n\nconst II = z.literal(PROVIDERS.II, { description: \"Internet Identity\" })\n\nconst printProviders = () => Object.values(PROVIDERS).join(\", \")\nconst Provider = z.string().refine(s => s === II.value, {\n  message: `Invalid provider. Expected Provider as String. Choose between: ${printProviders()}`,\n})\n\nconst Providers = z.object({\n  II,\n})\nexport type Providers = z.infer<typeof Providers>\n\nconst Integrator = z\n  .string({\n    description: DESCRIPTION.INTEGRATOR,\n    invalid_type_error:\n      \"Invalid integrator. Expected Quark address (username@testnet.quark) as String\",\n    required_error: \"Config.integrator is required\",\n  })\n  .email({\n    message: \"Invalid value for Config.integrator\",\n  })\n\nconst Domain = z\n  .string({\n    description: \"The domain of the Quark website\",\n    required_error: \"Config.domain is required\",\n  })\n  .url({ message: \"Invalid url\" })\n  .regex(/(^http:\\/\\/localhost:\\d+$)|(^(https:\\/\\/).*(.ic0.app)$)/i, {\n    message: \"Invalid domain\",\n  })\n\n// .args() is `MessageEvent.data`\n// See: https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data\nconst Callback = z.function().args(z.any()).returns(z.any())\n\n/**\n * Notify\n *\n * Used to produce a Candid func that is called when the checkout\n * has been confirmed on the Quark website. From there on out it is\n * up to the integrator to process all the bought items by the end-user.\n *\n * More info:\n * https://smartcontracts.org/docs/candid-guide/candid-types.html#type-func\n */\n\nconst Principal = z\n  .string({\n    description: DESCRIPTION.NOTIFY.PRINCIPAL_ID,\n    required_error: \"Config.notify.principalId is required\",\n  })\n  .refine(p => validatePrincipal(p), {\n    message: \"Invalid Principal ID\",\n  })\n\nconst MethodName = z.string({\n  description: DESCRIPTION.NOTIFY.METHOD,\n  required_error: \"Config.notify.method is required\",\n})\nconst Notify = z\n  .object({\n    principalId: Principal,\n    methodName: MethodName,\n  })\n  .required()\n  .strict()\n\n/**\n * Config\n *\n * A config to initialize Quark on the integrator's website.\n */\nexport const Config = z\n  .object({\n    provider: Provider,\n    integrator: Integrator,\n    domain: Domain,\n    callback: Callback,\n    notify: Notify,\n  })\n  .required()\n  .strict()\n\nexport type Config = z.infer<typeof Config>\n\n/**\n * BasketItem\n */\n\nconst Name = z\n  .string({\n    description: DESCRIPTION.BAKSET.NAME,\n    required_error: \"Basket.name is required\",\n  })\n  .min(1, { message: \"Basket.name must be at least 1 character long\" })\n  .max(100, { message: \"Basket.name must be at most 100 characters long\" })\nconst Description = z\n  .string({\n    description: DESCRIPTION.BAKSET.DESCRIPTION,\n  })\n  .min(1, { message: \"Basket.description must be at least 1 character long\" })\n  .max(100, {\n    message: \"Basket.description must be at most 100 characters long\",\n  })\nconst Value = z\n  .number({\n    description: \"Number of tokens to pay for this Basket item.\",\n    invalid_type_error: \"Invalid Basket.value Type. Expected Number\",\n    required_error: \"Basket.value is required\",\n  })\n  .positive({ message: \"Basket.value must be greater than 0\" })\n\n/**\n * Tokens\n */\nconst TOKENS = {\n  TEST: \"TEST\",\n}\nconst TEST = z.literal(\"TEST\", {\n  description: \"Quark Test Token. Used for development on testnets\",\n})\nconst printTokens = () => Object.values(TOKENS).join(\", \")\nconst Token = z.string().refine(s => s === TEST.value, {\n  message: `Invalid provider. Expected Provider as String. Choose between: ${printTokens()}`,\n})\nconst Tokens = z.object({\n  TEST,\n})\nexport type Tokens = z.infer<typeof Tokens>\n\n/**\n * Basket\n *\n * The basket is an array of items that the end-user has selected to pay for.\n * The name, description and price of each item is shown on the Quark website\n * upon Checkout.\n */\n\nconst BasketItem = z\n  .object({\n    name: Name,\n    description: Description.optional(),\n    value: Value,\n    token: Token,\n  })\n  .required()\nexport const Basket = BasketItem.array()\nexport type Basket = z.infer<typeof Basket>\n\n/**\n * Checkout\n */\n\nconst Checkout = z.function().args(Basket).returns(z.boolean())\nexport type Checkout = z.infer<typeof Checkout>\n\n/**\n * Because the `basket` and `window` can only be assigned by the user's browser, we need to\n * use a closure to create a Checkout function with all necessary values to send to the Quark window.\n */\n\nconst Closure = z.object({\n  window: z.any(),\n  basket: Basket.optional(),\n})\nexport type Closure = {\n  window?: Window\n  basket?: Basket\n}\n\n/**\n * CreateCheckout\n *\n * Used to produce a Function that can be implemented by the integrator how they see fit.\n * The user will most likely call this function when the user clicks a \"Pay\" button.\n */\n\nconst CreateCheckoutConfig = z\n  .object({\n    provider: Provider,\n    domain: Domain,\n    closure: Closure,\n  })\n  .required()\n  .strict()\nexport type CreateCheckoutConfig = z.infer<typeof CreateCheckoutConfig>\n\nconst CreateCheckout = z.function().args(CreateCheckoutConfig).returns(Checkout)\nexport type CreateCheckout = z.infer<typeof CreateCheckout>\n","/**\n * validate - Validate quark config and basket\n *\n * Please delete package when validated.\n *\n * This package helps you use correctly setup your quark integration.\n * By calling this function you can validate your Quark config and\n * basket data during runtime.\n */\nimport { Config, Basket } from \"../../src/schemas\"\n\nfunction config(c: Config) {\n  return Config.parse(c)\n}\n\nfunction basket(b: Basket) {\n  return Basket.parse(b)\n}\n\nconst validate = { config, basket }\nexport { validate }\n"],"names":["P","z"],"mappings":"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"}